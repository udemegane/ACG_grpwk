// @generated by protobuf-ts 2.1.0
// @generated from protobuf file "backapi.proto" (package "protobuf", syntax proto2)
// tslint:disable
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message protobuf.Login
 */
export interface Login {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message protobuf.Signup
 */
export interface Signup {
    /**
     * @generated from protobuf field: string username = 1;
     */
    username: string;
    /**
     * @generated from protobuf field: string password = 2;
     */
    password: string;
}
/**
 * @generated from protobuf message protobuf.CheckToken
 */
export interface CheckToken {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
/**
 * @generated from protobuf message protobuf.RespToken
 */
export interface RespToken {
    /**
     * @generated from protobuf field: optional string token = 1;
     */
    token?: string;
    /**
     * @generated from protobuf field: bool success = 2;
     */
    success: boolean;
}
/**
 * @generated from protobuf message protobuf.RespSuccess
 */
export interface RespSuccess {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
/**
 * @generated from protobuf message protobuf.CreateBattleLog
 */
export interface CreateBattleLog {
    /**
     * @generated from protobuf field: string battleToken = 1;
     */
    battleToken: string;
    /**
     * @generated from protobuf oneof: winner
     */
    winner: {
        oneofKind: "isSingleMode";
        /**
         * @generated from protobuf field: bool isSingleMode = 2;
         */
        isSingleMode: boolean;
    } | {
        oneofKind: "meWinner";
        /**
         * @generated from protobuf field: bool meWinner = 3;
         */
        meWinner: boolean;
    } | {
        oneofKind: "isDraw";
        /**
         * @generated from protobuf field: bool isDraw = 4;
         */
        isDraw: boolean;
    } | {
        oneofKind: undefined;
    };
    /**
     * @generated from protobuf field: string myToken = 5;
     */
    myToken: string;
    /**
     * @generated from protobuf field: optional string enemyToken = 6;
     */
    enemyToken?: string;
    /**
     * @generated from protobuf field: int32 elapsedms = 7;
     */
    elapsedms: number;
}
// @generated message type with reflection information, may provide speed optimized methods
class Login$Type extends MessageType<Login> {
    constructor() {
        super("protobuf.Login", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Login>): Login {
        const message = { username: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Login>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Login): Login {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Login, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf.Login
 */
export const Login = new Login$Type();
// @generated message type with reflection information, may provide speed optimized methods
class Signup$Type extends MessageType<Signup> {
    constructor() {
        super("protobuf.Signup", [
            { no: 1, name: "username", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "password", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Signup>): Signup {
        const message = { username: "", password: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Signup>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Signup): Signup {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string username */ 1:
                    message.username = reader.string();
                    break;
                case /* string password */ 2:
                    message.password = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Signup, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string username = 1; */
        if (message.username !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.username);
        /* string password = 2; */
        if (message.password !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.password);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf.Signup
 */
export const Signup = new Signup$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CheckToken$Type extends MessageType<CheckToken> {
    constructor() {
        super("protobuf.CheckToken", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<CheckToken>): CheckToken {
        const message = { token: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CheckToken>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CheckToken): CheckToken {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CheckToken, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf.CheckToken
 */
export const CheckToken = new CheckToken$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RespToken$Type extends MessageType<RespToken> {
    constructor() {
        super("protobuf.RespToken", [
            { no: 1, name: "token", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RespToken>): RespToken {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RespToken>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RespToken): RespToken {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* optional string token */ 1:
                    message.token = reader.string();
                    break;
                case /* bool success */ 2:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RespToken, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* optional string token = 1; */
        if (message.token !== undefined)
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        /* bool success = 2; */
        if (message.success !== false)
            writer.tag(2, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf.RespToken
 */
export const RespToken = new RespToken$Type();
// @generated message type with reflection information, may provide speed optimized methods
class RespSuccess$Type extends MessageType<RespSuccess> {
    constructor() {
        super("protobuf.RespSuccess", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<RespSuccess>): RespSuccess {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<RespSuccess>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: RespSuccess): RespSuccess {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: RespSuccess, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf.RespSuccess
 */
export const RespSuccess = new RespSuccess$Type();
// @generated message type with reflection information, may provide speed optimized methods
class CreateBattleLog$Type extends MessageType<CreateBattleLog> {
    constructor() {
        super("protobuf.CreateBattleLog", [
            { no: 1, name: "battleToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "isSingleMode", kind: "scalar", oneof: "winner", T: 8 /*ScalarType.BOOL*/ },
            { no: 3, name: "meWinner", kind: "scalar", oneof: "winner", T: 8 /*ScalarType.BOOL*/ },
            { no: 4, name: "isDraw", kind: "scalar", oneof: "winner", T: 8 /*ScalarType.BOOL*/ },
            { no: 5, name: "myToken", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 6, name: "enemyToken", kind: "scalar", opt: true, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "elapsedms", kind: "scalar", T: 5 /*ScalarType.INT32*/ }
        ]);
    }
    create(value?: PartialMessage<CreateBattleLog>): CreateBattleLog {
        const message = { battleToken: "", winner: { oneofKind: undefined }, myToken: "", elapsedms: 0 };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CreateBattleLog>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CreateBattleLog): CreateBattleLog {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string battleToken */ 1:
                    message.battleToken = reader.string();
                    break;
                case /* bool isSingleMode */ 2:
                    message.winner = {
                        oneofKind: "isSingleMode",
                        isSingleMode: reader.bool()
                    };
                    break;
                case /* bool meWinner */ 3:
                    message.winner = {
                        oneofKind: "meWinner",
                        meWinner: reader.bool()
                    };
                    break;
                case /* bool isDraw */ 4:
                    message.winner = {
                        oneofKind: "isDraw",
                        isDraw: reader.bool()
                    };
                    break;
                case /* string myToken */ 5:
                    message.myToken = reader.string();
                    break;
                case /* optional string enemyToken */ 6:
                    message.enemyToken = reader.string();
                    break;
                case /* int32 elapsedms */ 7:
                    message.elapsedms = reader.int32();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: CreateBattleLog, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string battleToken = 1; */
        if (message.battleToken !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.battleToken);
        /* bool isSingleMode = 2; */
        if (message.winner.oneofKind === "isSingleMode")
            writer.tag(2, WireType.Varint).bool(message.winner.isSingleMode);
        /* bool meWinner = 3; */
        if (message.winner.oneofKind === "meWinner")
            writer.tag(3, WireType.Varint).bool(message.winner.meWinner);
        /* bool isDraw = 4; */
        if (message.winner.oneofKind === "isDraw")
            writer.tag(4, WireType.Varint).bool(message.winner.isDraw);
        /* string myToken = 5; */
        if (message.myToken !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.myToken);
        /* optional string enemyToken = 6; */
        if (message.enemyToken !== undefined)
            writer.tag(6, WireType.LengthDelimited).string(message.enemyToken);
        /* int32 elapsedms = 7; */
        if (message.elapsedms !== 0)
            writer.tag(7, WireType.Varint).int32(message.elapsedms);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf.CreateBattleLog
 */
export const CreateBattleLog = new CreateBattleLog$Type();
