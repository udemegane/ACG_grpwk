// @generated by protobuf-ts 2.1.0
// @generated from protobuf file "websocket.proto" (package "protobuf", syntax proto2)
// tslint:disable
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message protobuf.CloseWs
 */
export interface CloseWs {
}
/**
 * @generated from protobuf message protobuf.WsReqWrapper
 */
export interface WsReqWrapper {
    /**
     * @generated from protobuf oneof: content
     */
    content: {
        oneofKind: "closews";
        /**
         * @generated from protobuf field: protobuf.CloseWs closews = 1;
         */
        closews: CloseWs;
    } | {
        oneofKind: undefined;
    };
}
/**
 * @generated from protobuf message protobuf.WsRespWrapper
 */
export interface WsRespWrapper {
    /**
     * @generated from protobuf oneof: content
     */
    content: {
        oneofKind: "closews";
        /**
         * @generated from protobuf field: protobuf.CloseWs closews = 1;
         */
        closews: CloseWs;
    } | {
        oneofKind: undefined;
    };
}
// @generated message type with reflection information, may provide speed optimized methods
class CloseWs$Type extends MessageType<CloseWs> {
    constructor() {
        super("protobuf.CloseWs", []);
    }
    create(value?: PartialMessage<CloseWs>): CloseWs {
        const message = {};
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<CloseWs>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: CloseWs): CloseWs {
        return target ?? this.create();
    }
    internalBinaryWrite(message: CloseWs, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf.CloseWs
 */
export const CloseWs = new CloseWs$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WsReqWrapper$Type extends MessageType<WsReqWrapper> {
    constructor() {
        super("protobuf.WsReqWrapper", [
            { no: 1, name: "closews", kind: "message", oneof: "content", T: () => CloseWs }
        ]);
    }
    create(value?: PartialMessage<WsReqWrapper>): WsReqWrapper {
        const message = { content: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WsReqWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WsReqWrapper): WsReqWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protobuf.CloseWs closews */ 1:
                    message.content = {
                        oneofKind: "closews",
                        closews: CloseWs.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).closews)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WsReqWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protobuf.CloseWs closews = 1; */
        if (message.content.oneofKind === "closews")
            CloseWs.internalBinaryWrite(message.content.closews, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf.WsReqWrapper
 */
export const WsReqWrapper = new WsReqWrapper$Type();
// @generated message type with reflection information, may provide speed optimized methods
class WsRespWrapper$Type extends MessageType<WsRespWrapper> {
    constructor() {
        super("protobuf.WsRespWrapper", [
            { no: 1, name: "closews", kind: "message", oneof: "content", T: () => CloseWs }
        ]);
    }
    create(value?: PartialMessage<WsRespWrapper>): WsRespWrapper {
        const message = { content: { oneofKind: undefined } };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<WsRespWrapper>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: WsRespWrapper): WsRespWrapper {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* protobuf.CloseWs closews */ 1:
                    message.content = {
                        oneofKind: "closews",
                        closews: CloseWs.internalBinaryRead(reader, reader.uint32(), options, (message.content as any).closews)
                    };
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: WsRespWrapper, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* protobuf.CloseWs closews = 1; */
        if (message.content.oneofKind === "closews")
            CloseWs.internalBinaryWrite(message.content.closews, writer.tag(1, WireType.LengthDelimited).fork(), options).join();
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message protobuf.WsRespWrapper
 */
export const WsRespWrapper = new WsRespWrapper$Type();
