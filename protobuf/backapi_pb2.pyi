"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor = ...

class Login(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    USERNAME_FIELD_NUMBER: builtins.int
    PASSWORD_FIELD_NUMBER: builtins.int
    username: typing.Text = ...
    password: typing.Text = ...
    def __init__(self,
        *,
        username : typing.Optional[typing.Text] = ...,
        password : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["password",b"password","username",b"username"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["password",b"password","username",b"username"]) -> None: ...
global___Login = Login

class Signup(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    USERNAME_FIELD_NUMBER: builtins.int
    PASSWORD_FIELD_NUMBER: builtins.int
    username: typing.Text = ...
    password: typing.Text = ...
    def __init__(self,
        *,
        username : typing.Optional[typing.Text] = ...,
        password : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["password",b"password","username",b"username"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["password",b"password","username",b"username"]) -> None: ...
global___Signup = Signup

class CheckToken(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TOKEN_FIELD_NUMBER: builtins.int
    token: typing.Text = ...
    def __init__(self,
        *,
        token : typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["token",b"token"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["token",b"token"]) -> None: ...
global___CheckToken = CheckToken

class RespToken(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    TOKEN_FIELD_NUMBER: builtins.int
    SUCCESS_FIELD_NUMBER: builtins.int
    token: typing.Text = ...
    success: builtins.bool = ...
    def __init__(self,
        *,
        token : typing.Optional[typing.Text] = ...,
        success : typing.Optional[builtins.bool] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["success",b"success","token",b"token"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["success",b"success","token",b"token"]) -> None: ...
global___RespToken = RespToken

class RespSuccess(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    SUCCESS_FIELD_NUMBER: builtins.int
    success: builtins.bool = ...
    def __init__(self,
        *,
        success : typing.Optional[builtins.bool] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["success",b"success"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["success",b"success"]) -> None: ...
global___RespSuccess = RespSuccess

class CreateBattleLog(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor = ...
    BATTLETOKEN_FIELD_NUMBER: builtins.int
    ISSINGLEMODE_FIELD_NUMBER: builtins.int
    MEWINNER_FIELD_NUMBER: builtins.int
    ISDRAW_FIELD_NUMBER: builtins.int
    MYTOKEN_FIELD_NUMBER: builtins.int
    ENEMYTOKEN_FIELD_NUMBER: builtins.int
    ELAPSEDMS_FIELD_NUMBER: builtins.int
    battleToken: typing.Text = ...
    isSingleMode: builtins.bool = ...
    meWinner: builtins.bool = ...
    isDraw: builtins.bool = ...
    myToken: typing.Text = ...
    enemyToken: typing.Text = ...
    elapsedms: builtins.int = ...
    def __init__(self,
        *,
        battleToken : typing.Optional[typing.Text] = ...,
        isSingleMode : typing.Optional[builtins.bool] = ...,
        meWinner : typing.Optional[builtins.bool] = ...,
        isDraw : typing.Optional[builtins.bool] = ...,
        myToken : typing.Optional[typing.Text] = ...,
        enemyToken : typing.Optional[typing.Text] = ...,
        elapsedms : typing.Optional[builtins.int] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["battleToken",b"battleToken","elapsedms",b"elapsedms","enemyToken",b"enemyToken","isDraw",b"isDraw","isSingleMode",b"isSingleMode","meWinner",b"meWinner","myToken",b"myToken","winner",b"winner"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["battleToken",b"battleToken","elapsedms",b"elapsedms","enemyToken",b"enemyToken","isDraw",b"isDraw","isSingleMode",b"isSingleMode","meWinner",b"meWinner","myToken",b"myToken","winner",b"winner"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["winner",b"winner"]) -> typing.Optional[typing_extensions.Literal["isSingleMode","meWinner","isDraw"]]: ...
global___CreateBattleLog = CreateBattleLog
